@page "/Cliente/Create"
@page "/Cliente/Create/{ClientesId:int}"
@inject ClientesServices clientesServices
@rendermode InteractiveServer


<EditForm Model="Clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @*Alerta Guardado*@
    <Alert Color="@alertColorGuardo" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameGuardo" class="me-2"></Icon>@alertaGuardo
    </Alert>
    @*Alerta Error al guardar*@
    <Alert Color="@alertColorError" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameError" class="me-2"></Icon>@alertaError
    </Alert>
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Clientes</h3>
        </div>
        <div class="card-body">
            @* ClientesId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="ClientesId" class="form-label">ClientesId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Clientes.ClientesId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                            <ValidationMessage For="@(() => Clientes.ClientesId)" />
                        </div>
                    </div>
                </div>
            </div>
            @* Nombre *@
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Clientes.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Clientes.Nombres)" />

            </div>

            @* WhatsApp *@
            <div class="mb-3">
                <label for="WhatsApp" class="form-label">WhatsApp:</label>
                <InputText @bind-Value="Clientes.WhatsApp" class="form-control"  />
                <ValidationMessage For="@(() => Clientes.WhatsApp)" />
            </div>
        </div>
    </div>
    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            @*Boton Nuevo*@
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
            @*Boton Guardar*@
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            @*Boton Retroceder*@
            <a type="button" href="/Cliente/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ClientesId { get; set; }
    public Clientes Clientes { get; set; } = new Clientes();
    public string WhatsAppFormatted { get; set; } = string.Empty;
    public int? clientesId { get; set; }
    public bool Existe { get; set; } = false;
    public bool mostrarNotificacion = false;
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    AlertColor alertColorGuardo, alertColorError;
    IconName alertIconNameGuardo, alertIconNameError;
    string alertaGuardo = "", alertaError = "";

    public async Task MostrarNotificacion()
    {
        mostrarNotificacion = true;
        StateHasChanged();
        await Task.Delay(5000);
        mostrarNotificacion = false;
        StateHasChanged();
    }

    public void AlertaGuardado()
    {
        alertColorGuardo = AlertColor.Success;
        alertIconNameGuardo = IconName.CheckCircleFill;
        alertaGuardo = "El cliente se registró de manera correcta.";
    }

    public void AlertaError()
    {
        alertColorError = AlertColor.Danger;
        alertIconNameError = IconName.ExclamationTriangleFill;
        alertaError = "Ya existe un cliente registrado con ese nombre.";
    }

    protected override void OnInitialized()
    {
        if (clientesId.HasValue)
        {
            Clientes.ClientesId = clientesId.Value;
        }
    }

    public async Task Guardar()
    {
        if (Clientes.WhatsApp?.Length != 10)
        {
            alertColorError = AlertColor.Danger;
            alertIconNameError = IconName.ExclamationTriangleFill;
            alertaError = "El WhatsApp debe tener exactamente 10 números.";
            await MostrarNotificacion();
            return;
        }
        else
        {
            var guardar = await clientesServices.Guardar(Clientes);
            if (guardar)
            {
                AlertaGuardado();
                await MostrarNotificacion();
                
            }
            else
            {
                AlertaError();
                await MostrarNotificacion();
            }
        }
    }


    public void Nuevo()
    {
        this.Clientes = new Clientes();
    }

    public async Task<bool> Validar()
    {
        bool existeClientes = await clientesServices.ExiteNombres(Clientes.Nombres, Clientes.ClientesId);
        return existeClientes;
    }

   

}
