@page "/Trabajo/Edit"
@page "/Trabajo/Edit/{TrabajosId:int}"
@inject TrabajosServices trabajosServices
@rendermode InteractiveServer


<EditForm Model="Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Trabajo</h3>
        </div>
        </div>
      <div class="card-body">
            @* TrabajosId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajosId" class="form-label">TrabajosId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Trabajos.TrabajosId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                            <ValidationMessage For="@(() => Trabajos.TrabajosId)" />
                        </div>
                    </div>
                </div>
            </div>
            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajos.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Fecha)" />

            </div>
            @* Cliente *@
            <div class="mb-3">
                <label for="Clientes" class="form-label">Clientes:</label>
               <InputSelect @bind-Value="Trabajos.ClientesId" class="form-select" aria-label="Clientes">
                <option selected>Selecciona un Clientes</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClientesId">@item.Nombres</option>
                    }
                </InputSelect>

            </div

            @* Tecnico *@
            <div class="mb-3">
                  <label for="Tecnicos" class="form-label">Tecnicos:</label>
               <InputSelect @bind-Value="Trabajos.TecnicoId" class="form-select" aria-label="TecnicoId">
                <option selected>Selecciona un Tecnico</option>
                    @foreach (var item in ListaTecnicos)
                    {
                        <option value="@item.TecnicoId">@item.Nombre</option>
                    }
                </InputSelect>

            </div

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Trabajos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Descripcion)" />

             </div>
        @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajos.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Monto)" />
            </div>
            

    </div>
    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            @*Boton Nuevo*@
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
            @*Boton Guardar*@
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            @*Boton Retroceder*@
            <a type="button" href="/Cliente/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajosId { get; set; }
    public bool Existe { get; set; } = false;
    Trabajos Trabajos { get; set; } = new Trabajos();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        if (TrabajosId != 0)
        {
            ListaClientes = await trabajosServices.ObtenerClientes();
            ListaTecnicos = await trabajosServices.ObtenerTecnicos();
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        Existe = false;
        var encontro = await trabajosServices.Buscar(TrabajosId);

        if (encontro != null)
        {
            Trabajos = encontro;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (Validar())
        {
            return;
        }
        var guardo = await trabajosServices.Guardar(Trabajos);
        if (guardo)
        {
            Nuevo();
        }
    }

    public bool Validar()
    {
        Existe = trabajosServices.Listar(t => t.TrabajosId != Trabajos.TrabajosId).Any();
        return Existe;
    }

    public void Nuevo()
    {
        Trabajos = new Trabajos();
        Existe = false;
    }

}
