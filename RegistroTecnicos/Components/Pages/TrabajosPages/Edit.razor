@page "/Trabajo/Edit"
@page "/Trabajo/Edit/{TrabajosId:int}"
@inject TrabajosServices trabajosServices
@inject ArticuloServices articuloServices
@rendermode InteractiveServer


<EditForm Model="Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Trabajo</h3>
        </div>
        </div>
      <div class="card-body">
            @* TrabajosId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajosId" class="form-label">TrabajosId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Trabajos.TrabajosId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                            <ValidationMessage For="@(() => Trabajos.TrabajosId)" />
                        </div>
                    </div>
                </div>
            </div>
            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajos.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Fecha)" />

            </div>
            @* Cliente *@
            <div class="mb-3">
                <label for="Clientes" class="form-label">Clientes:</label>
               <InputSelect @bind-Value="Trabajos.ClientesId" class="form-select" aria-label="Clientes">
                <option value="0">Selecciona un Clientes</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClientesId">@item.Nombres</option>
                    }
                </InputSelect>
            <ValidationMessage For="@(() => Trabajos.ClientesId)" />
            </div>

            @* Tecnico *@
            <div class="mb-3">
                  <label for="Tecnicos" class="form-label">Tecnicos:</label>
               <InputSelect @bind-Value="Trabajos.TecnicoId" class="form-select" aria-label="TecnicoId">
                <option value="0">Selecciona un Tecnico</option>
                    @foreach (var item in ListaTecnicos)
                    {
                        <option value="@item.TecnicoId">@item.Nombre</option>
                    }
                </InputSelect>
            <ValidationMessage For="@(() => Trabajos.TecnicoId)" />
            </div>

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Trabajos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Descripcion)" />

             </div>
              @* Prioridades *@
            <div class="mb-3">
                <label for="Prioridades" class="form-label">Prioridades:</label>
               <InputSelect @bind-Value="Trabajos.PrioridadesId" class="form-select" aria-label="Prioridades">
                <option value="0">Selecciona un Prioridad</option>
                    @foreach (var item in ListaPrioridades)
                    {
                        <option value="@item.PrioridadesId">@item.Descripcion</option>
                    }
                </InputSelect>
            <ValidationMessage For="@(() => Trabajos.PrioridadesId)" />
            </div>
        @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajos.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Monto)" />
            </div>

             @* Selecionar Articulo *@
             <div class="card border-success mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Detalles de articulos utilizados</h5>
                </div>
                <div style="display: flex; align-items: center;"
                        <div class="col-3 text-center">
                            <InputSelect @bind-Value="selectArticuloId" class="form-select">
                                <option value="0">--Seleccione un articulo--</option>
                                @foreach (var articulo in ListaArticulo)
                                {
                                    <option value="@articulo.ArticuloId">@articulo.ArticuloId - @articulo.Descripcion </option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => selectArticuloId)" />
                        </div>
                        @* Selecionar Cantidad *@ 
                    <div class="col-sm-3 p-0">
                        <div class="input-group">
                            <span class="input-group-text">Cantidad:</span>
                            <InputNumber @bind-Value="TrabajoDetalle.Cantidad" class="form-control" />
                        </div>
                        <ValidationMessage For="@(() => TrabajoDetalle.Cantidad)" />
                    </div>
                     @* Precio*@
                    <div class="col-sm-3 p-0">
                            <div class="input-group">
                                <span class="input-group-text">Precio:</span>
                                <InputNumber @bind-Value="TrabajoDetalle.Precio" class="form-control" Disabled />
                            </div>
                            <ValidationMessage For="@(() => TrabajoDetalle.Precio)" />
                    </div>

                         @* boton agregar *@
                        <div class="col-sm-2 p-0">
                            <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">
                                <span class="bi bi-plus"></span> Agregar
                            </button>
                        </div>
                </div>

                       @* Tabla de Detalles *@
            <div class="table-responsive mt-3">
                <table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            <th>Articulo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                       
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in ListaTrabajoDetalle)
                        {
                            <tr>
                                <td>@detalle.ArticuloId</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Precio</td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => EliminarElDetalle(detalle)">
                                        <span class="bi bi-trash"></span> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
                
            </div>
            

    </div>
    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            @*Boton Nuevo*@
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
            @*Boton Guardar*@
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            @*Boton Retroceder*@
            <a type="button" href="/Trabajo/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajosId { get; set; }
    public bool Existe { get; set; } = false;
    Trabajos Trabajos { get; set; } = new Trabajos();
    public int selectArticuloId { get; set; }
    decimal? MontoArticulos;
    public TrabajoDetalle TrabajoDetalle { get; set; } = new TrabajoDetalle();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> ListaPrioridades { get; set; } = new List<Prioridades>();
    public List<TrabajoDetalle> ListaTrabajoDetalle { get; set; } = new List<TrabajoDetalle>();
    public List<Articulos> ListaArticulo { get; set; } = new List<Articulos>();

    protected override async Task OnInitializedAsync()
    {
        if(TrabajosId != 0)
        {
            ListaClientes = await trabajosServices.ObtenerClientes();
            ListaTecnicos = await trabajosServices.ObtenerTecnicos();
            ListaPrioridades = await trabajosServices.ObtenerPrioridades();
            ListaTrabajoDetalle = await trabajosServices.ObtenerDetalle();
            ListaArticulo = await trabajosServices.ObtenerArticulos();
            ListaTrabajoDetalle = await trabajosServices.ObtenerDetallesTrabajoId(TrabajosId) ?? new List<TrabajoDetalle>();

            await CalcularTotal();
            await Buscar();
            
        }
  
        
    }

    public async Task Buscar()
    {
        Existe = false;
        var encontro = await trabajosServices.Buscar(TrabajosId);

        if (encontro != null)
        {
            Trabajos = encontro;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (Validar())
        {
            return;
        }

        var guardo = await trabajosServices.Guardar(Trabajos);
        if (guardo)
        {
            Nuevo();
        }

    }


    public bool Validar()
    {
        Existe = trabajosServices.Listar(t => t.TrabajosId != Trabajos.TrabajosId).Any();
        if (Existe)
        {
            return true;
        }

        return false;
    }

    public void Nuevo()
    {
        Trabajos = new Trabajos();
        Existe = false;
    }

    public async Task AgregarDetalle()
    {
        var articuloSeleccionado = ListaArticulo.FirstOrDefault(a => a.ArticuloId == selectArticuloId);

        if (articuloSeleccionado == null || TrabajoDetalle.Cantidad <= 0)
        {

            return;
        }

        if (articuloSeleccionado.Existencia < TrabajoDetalle.Cantidad)
        {

            return;
        }

        TrabajoDetalle.Precio = articuloSeleccionado.Precio;

        var nuevoDetalle = new TrabajoDetalle
        {
            ArticuloId = articuloSeleccionado.ArticuloId,
            Cantidad = TrabajoDetalle.Cantidad,
            Precio = articuloSeleccionado.Precio
        };


        ListaTrabajoDetalle.Add(nuevoDetalle);
        TrabajoDetalle = new TrabajoDetalle();
        selectArticuloId = 0;

        CalcularTotal();
    }

    private async Task CalcularTotal()
    {
        MontoArticulos = ListaTrabajoDetalle.Sum(d => (d.Precio ?? 0) * d.Cantidad);
        Trabajos.Monto = MontoArticulos ?? 0;
    }

    public async Task EliminarElDetalle(TrabajoDetalle detalle)
    {
        selectArticuloId = 0;
        TrabajoDetalle = new TrabajoDetalle();
        ListaTrabajoDetalle.Remove(detalle);
        selectArticuloId = detalle.ArticuloId ?? 0;
        TrabajoDetalle.Cantidad = detalle.Cantidad;
        TrabajoDetalle.Precio = detalle.Precio ?? 0;
        CalcularTotal();
        StateHasChanged();
    }

 
}
