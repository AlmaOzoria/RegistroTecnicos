@page "/Trabajo/Create"
@page "/Trabajo/Create/{TrabajosId:int}"
@inject TrabajosServices trabajosServices
@rendermode InteractiveServer


<EditForm Model="Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @*Alerta Guardado*@
    <Alert Color="@alertColorGuardo" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameGuardo" class="me-2"></Icon>@alertaGuardo
    </Alert>
    @*Alerta Error al guardar*@
    <Alert Color="@alertColorError" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameError" class="me-2"></Icon>@alertaError
    </Alert>
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Trabajos</h3>
        </div>
    </div>
        <div class="card-body">
            @* TrabajosId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajosId" class="form-label">TrabajosId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Trabajos.TrabajosId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                            <ValidationMessage For="@(() => Trabajos.TrabajosId)" />
                        </div>
                    </div>
                </div>
            </div>
            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajos.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Fecha)" />

            </div>
            @* Cliente *@
            <div class="mb-3">
                <label for="Clientes" class="form-label">Clientes:</label>
               <InputSelect @bind-Value="Trabajos.ClientesId" class="form-select" aria-label="Clientes">
                <option selected>Selecciona un Clientes</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClientesId">@item.Nombres</option>
                    }
                </InputSelect>

            </div

            @* Tecnico *@
            <div class="mb-3">
                  <label for="Tecnicos" class="form-label">Tecnicos:</label>
               <InputSelect @bind-Value="Trabajos.TecnicoId" class="form-select" aria-label="TecnicoId">
                <option selected>Selecciona un Tecnico</option>
                    @foreach (var item in ListaTecnicos)
                    {
                        <option value="@item.TecnicoId">@item.Nombre</option>
                    }
                </InputSelect>

            </div

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Trabajos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Descripcion)" />

             </div>
        @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajos.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajos.Monto)" />
            </div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}
    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            @*Boton Nuevo*@
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
            @*Boton Guardar*@
            <button type="submit" class="btn btn-outline-success ml-2"@onclick="Guardar"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            @*Boton Retroceder*@
            <a type="button" href="/Trabajo/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
        </div>
    </div>
  </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajosId { get; set; }
    public Trabajos Trabajos { get; set; } = new Trabajos();
    public int? trabajosId { get; set; }
    public bool Existe { get; set; } = false;
    public bool mostrarNotificacion = false;
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    private string ErrorMessage { get; set; } = string.Empty;
    AlertColor alertColorGuardo, alertColorError;
    IconName alertIconNameGuardo, alertIconNameError;
    string alertaGuardo = "", alertaError = "";

    public async Task MostrarNotificacion()
    {
        mostrarNotificacion = true;
        StateHasChanged();
        await Task.Delay(5000);
        mostrarNotificacion = false;
        StateHasChanged();
    }

    public void AlertaGuardado()
    {
        alertColorGuardo = AlertColor.Success;
        alertIconNameGuardo = IconName.CheckCircleFill;
        alertaGuardo = "El trabajo se registró de manera correcta.";
    }

    public void AlertaError()
    {
        alertColorError = AlertColor.Danger;
        alertIconNameError = IconName.ExclamationTriangleFill;
        alertaError = "Ya existe un trabajo registrado con ese nombre.";
    }

    

    public async Task Guardar()
{
    if (await Validar())
    {
        
        await MostrarNotificacion();
        return;
    }

    var guardar = await trabajosServices.Guardar(Trabajos);
    if (guardar)
    {
        AlertaGuardado();
        await MostrarNotificacion();
        return;
    }
    else
    {
        AlertaError();
        await MostrarNotificacion();
    }
}
   


    public void Nuevo()
    {
        this.Trabajos = new Trabajos();
    }

  public async Task<bool> Validar()
    {
        bool existeTrabajos = await trabajosServices.Existe(Trabajos.TrabajosId);
        return existeTrabajos;
    }


    protected override async Task OnInitializedAsync()
    {
       
             ListaClientes = await trabajosServices.ObtenerClientes();
             ListaTecnicos = await trabajosServices.ObtenerTecnicos();
    }

    
}